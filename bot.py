import asyncio
import logging
from aiogram import Bot, Dispatcher, Router, types, F
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command 

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à)
TOKEN = "7776078242:AAE4JRhawvT_vCgjRJ_bxyjlmadux5iole4"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()
router = Router()

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã
main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìã –í–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ")],
        [KeyboardButton(text="üìä –ü—Ä–æ–≥—Ä–µ—Å—Å"), KeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")]
    ],
    resize_keyboard=True
)

# –£—Ä–æ–≤–Ω–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
activity_levels = {
    "–ú–∞–ª–æ–ø–æ–¥–≤–∏–∂–Ω—ã–π": 1.2,
    "–°–ª–∞–±–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å": 1.375,
    "–°—Ä–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å": 1.55,
    "–í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å": 1.725,
    "–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å": 1.9
}

# –¶–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
goals = {
    "–ü–æ—Ö—É–¥–µ–Ω–∏–µ": -300,
    "–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–µ—Å–∞": 0,
    "–ù–∞–±–æ—Ä –º–∞—Å—Å—ã": 300
}

# –°–ª–æ–≤–∞—Ä—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
recommendations = {
    "low_cal": ["ü•ó –ë–æ–ª—å—à–µ –æ–≤–æ—â–µ–π –∏ –±–µ–ª–∫–∞", "üö∂ 10 000 —à–∞–≥–æ–≤ –≤ –¥–µ–Ω—å", "üíß –ü–µ–π—Ç–µ –±–æ–ª—å—à–µ –≤–æ–¥—ã"],
    "maintain": ["üçΩ –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ", "üèãÔ∏è 3-4 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –Ω–µ–¥–µ–ª—é", "üò¥ 7-8 —á–∞—Å–æ–≤ —Å–Ω–∞"],
    "gain": ["üçó –£–≤–µ–ª–∏—á—å—Ç–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –±–µ–ª–∫–∞", "üèãÔ∏è‚Äç‚ôÇÔ∏è –°–∏–ª–æ–≤—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", "ü•ë –ï—à—å—Ç–µ –ø–æ–ª–µ–∑–Ω—ã–µ –∂–∏—Ä—ã"]
}

# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è inline-–∫–Ω–æ–ø–æ–∫
def create_task_buttons(user_id):
    buttons = []
    completed_tasks = user_data.get(user_id, {}).get("completed_tasks", set())

    for task in user_data[user_id]["tasks"]:
        status = "‚úÖ" if task in completed_tasks else "‚ùå"
        buttons.append([InlineKeyboardButton(text=f"{status} {task}", callback_data=f"task_{task}")])

    return InlineKeyboardMarkup(inline_keyboard=buttons)

# –•–µ–Ω–¥–ª–µ—Ä –∫–æ–º–∞–Ω–¥—ã /start
@router.message(Command("start"))
async def start_command(message: types.Message):
    user_id = message.from_user.id
    user_data[user_id] = {"completed_tasks": set()}
    
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å —Ñ–∏—Ç–Ω–µ—Å-–ø—Ä–æ–≥—Ä–∞–º–º–æ–π. –°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ.",
        reply_markup=main_menu
    )

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
@router.message(F.text == "üìã –í–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ")
async def request_user_data(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç, –≤–µ—Å, —Ä–æ—Å—Ç (–≤ —Å–º) —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–ø—Ä–∏–º–µ—Ä: `25, 70, 175`):")

# –•–µ–Ω–¥–ª–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.message(F.text.regexp(r"^\d{1,2},\s*\d{2,3},\s*\d{2,3}$"))
async def process_user_data(message: types.Message):
    user_id = message.from_user.id
    age, weight, height = map(int, message.text.split(","))

    user_data[user_id]["age"] = age
    user_data[user_id]["weight"] = weight
    user_data[user_id]["height"] = height

    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    activity_buttons = [[InlineKeyboardButton(text=level, callback_data=f"activity_{level}")] for level in activity_levels]
    keyboard = InlineKeyboardMarkup(inline_keyboard=activity_buttons)
    
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
@router.callback_query(F.data.startswith("activity_"))
async def set_activity(call: types.CallbackQuery):
    user_id = call.from_user.id
    level = call.data.replace("activity_", "")

    user_data[user_id]["activity_level"] = level

    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º —Ü–µ–ª—å
    goal_buttons = [[InlineKeyboardButton(text=goal, callback_data=f"goal_{goal}")] for goal in goals]
    keyboard = InlineKeyboardMarkup(inline_keyboard=goal_buttons)
    
    await call.message.edit_text("–ö–∞–∫–∞—è —É –≤–∞—Å —Ü–µ–ª—å?", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ü–µ–ª–∏
@router.callback_query(F.data.startswith("goal_"))
async def set_goal(call: types.CallbackQuery):
    user_id = call.from_user.id
    goal = call.data.replace("goal_", "")

    user_data[user_id]["goal"] = goal

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å
    bmr = 10 * user_data[user_id]["weight"] + 6.25 * user_data[user_id]["height"] - 5 * user_data[user_id]["age"] + 5
    tdee = bmr * activity_levels[user_data[user_id]["activity_level"]]
    calorie_goal = tdee + goals[goal]

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if goal == "–ü–æ—Ö—É–¥–µ–Ω–∏–µ":
        tasks = recommendations["low_cal"]
    elif goal == "–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–µ—Å–∞":
        tasks = recommendations["maintain"]
    else:
        tasks = recommendations["gain"]

    user_data[user_id]["tasks"] = tasks

    keyboard = create_task_buttons(user_id)
    
    await call.message.edit_text(
        f"–í–∞—à —Å—É—Ç–æ—á–Ω—ã–π –∫–∞–ª–æ—Ä–∞–∂: {calorie_goal:.0f} –∫–∫–∞–ª.\n–í–æ—Ç –≤–∞—à–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:",
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
@router.callback_query(F.data.startswith("task_"))
async def mark_task_done(call: types.CallbackQuery):
    user_id = call.from_user.id
    task = call.data.replace("task_", "")

    if task in user_data[user_id]["completed_tasks"]:
        user_data[user_id]["completed_tasks"].remove(task)
    else:
        user_data[user_id]["completed_tasks"].add(task)

    keyboard = create_task_buttons(user_id)
    await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:", reply_markup=keyboard)

# –•–µ–Ω–¥–ª–µ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
@router.message(F.text == "üìä –ü—Ä–æ–≥—Ä–µ—Å—Å")
async def show_progress(message: types.Message):
    user_id = message.from_user.id
    completed = len(user_data.get(user_id, {}).get("completed_tasks", set()))
    total = len(user_data[user_id]["tasks"])

    progress_percent = (completed / total) * 100
    await message.answer(f"üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: {completed} –∏–∑ {total} –∑–∞–¥–∞—á –≤—ã–ø–æ–ª–Ω–µ–Ω–æ ({progress_percent:.1f}%)")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    dp.include_router(router)
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
