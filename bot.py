import asyncio
import logging
from aiogram import Bot, Dispatcher, Router, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à)
TOKEN = "7776078242:AAE4JRhawvT_vCgjRJ_bxyjlmadux5iole4"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –°–æ–∑–¥–∞—ë–º Router
router = Router()

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (–∏–º–∏—Ç–∞—Ü–∏—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
user_data = {}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥
main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")],
        [KeyboardButton(text="üìä –ü—Ä–æ–≥—Ä–µ—Å—Å")]
    ],
    resize_keyboard=True
)

# –î–∞–Ω–Ω—ã–µ –æ –ø–∏—Ç–∞–Ω–∏–∏ –∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö
diet_recommendations = [
    "üç≥ –ó–∞–≤—Ç—Ä–∞–∫: –û–≤—Å—è–Ω–∫–∞ —Å —è–≥–æ–¥–∞–º–∏ –∏ –æ—Ä–µ—Ö–∞–º–∏",
    "ü•ó –û–±–µ–¥: –°–∞–ª–∞—Ç —Å –∫—É—Ä–∏—Ü–µ–π –Ω–∞ –≥—Ä–∏–ª–µ –∏ –æ–≤–æ—â–∞–º–∏",
    "üç£ –£–∂–∏–Ω: –õ–æ—Å–æ—Å—å —Å –∫–∏–Ω–æ–∞ –∏ –±—Ä–æ–∫–∫–æ–ª–∏",
    "ü•õ –ü–µ—Ä–µ–∫—É—Å: –ì—Ä–µ—á–µ—Å–∫–∏–π –π–æ–≥—É—Ä—Ç —Å –º—ë–¥–æ–º –∏ –º–∏–Ω–¥–∞–ª–µ–º"
]

exercise_recommendations = [
    "üèÉ –ö–∞—Ä–¥–∏–æ: 30 –º–∏–Ω—É—Ç –±–µ–≥–∞ –∏–ª–∏ –≤–µ–ª–æ—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏",
    "üí™ –°–∏–ª–æ–≤—ã–µ: 3x10 –ø—Ä–∏—Å–µ–¥–∞–Ω–∏—è, –æ—Ç–∂–∏–º–∞–Ω–∏—è, –≤—ã–ø–∞–¥—ã",
    "üßò –ì–∏–±–∫–æ—Å—Ç—å: 15 –º–∏–Ω—É—Ç –π–æ–≥–∏",
    "üìå –ö–æ—Ä: 3x20 –ø–ª–∞–Ω–∫–∞, —Å–∫—Ä—É—á–∏–≤–∞–Ω–∏—è"
]

# –•–µ–Ω–¥–ª–µ—Ä –∫–æ–º–∞–Ω–¥—ã /start
@router.message(lambda message: message.text == "/start")
async def start_command(message: types.Message):
    user_id = message.from_user.id
    user_data[user_id] = {"tasks_completed": 0, "total_tasks": len(diet_recommendations) + len(exercise_recommendations)}
    
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å —Ñ–∏—Ç–Ω–µ—Å-–ø–ª–∞–Ω–æ–º.\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu)

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
@router.message(lambda message: message.text == "üìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
async def send_recommendations(message: types.Message):
    recommendations = "\n".join(diet_recommendations + exercise_recommendations)
    await message.answer(f"–í–æ—Ç —Ç–≤–æ–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n\n{recommendations}")

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
@router.message(lambda message: message.text == "üìä –ü—Ä–æ–≥—Ä–µ—Å—Å")
async def show_progress(message: types.Message):
    user_id = message.from_user.id
    tasks_completed = user_data.get(user_id, {}).get("tasks_completed", 0)
    total_tasks = user_data.get(user_id, {}).get("total_tasks", len(diet_recommendations) + len(exercise_recommendations))
    
    progress_percent = (tasks_completed / total_tasks) * 100
    await message.answer(f"üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: {tasks_completed} –∏–∑ {total_tasks} –∑–∞–¥–∞—á –≤—ã–ø–æ–ª–Ω–µ–Ω–æ ({progress_percent:.1f}%)")

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    dp.include_router(router)  # –¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤–ª—è–µ–º Router, –∞ –Ω–µ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    asyncio.run(main())
